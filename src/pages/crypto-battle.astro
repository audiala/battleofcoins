---
import Layout from '../layouts/Layout.astro';
import CryptoBattle from '../components/CryptoBattle';
import { readFileSync, readdirSync } from 'node:fs';
import { join } from 'node:path';
import { load } from 'js-yaml';
import '../styles/battle.css';
import type { CryptoData } from '../components/CryptoTable';

// Read the YAML file for default cryptos
const dataDir = join(process.cwd(), 'data');
const files = readdirSync(dataDir);
const latestFile = files
  .filter(f => f.startsWith('top_500_coins_'))
  .sort()
  .reverse()[0];

const yamlContent = readFileSync(join(dataDir, latestFile), 'utf8');
const cryptoData = load(yamlContent) as CryptoData[];

// Default to top 16 if no selection
const default_cryptos = cryptoData.slice(0, 16);
---

<Layout title="Crypto Battle Tournament">
  <main>
    <div class="selection-container">
      <a href="/crypto-table" class="select-coins-button">
        Select Coins
        <span class="arrow">â†’</span>
      </a>
    </div>
    <div id="battle-container">
      <CryptoBattle 
        client:load 
        cryptos={default_cryptos}
        defaultCryptos={default_cryptos}
      />
    </div>
  </main>
</Layout>

<style>
  .selection-container {
    text-align: center;
    margin: 2rem 0;
  }

  .select-coins-button {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    background: #f53e98;
    color: white;
    padding: 1rem 2rem;
    border-radius: 0.5rem;
    font-weight: 600;
    text-decoration: none;
    transition: all 0.2s ease;
  }

  .select-coins-button:hover {
    background: #f52e88;
    transform: translateY(-2px);
  }

  .arrow {
    transition: transform 0.2s ease;
  }

  .select-coins-button:hover .arrow {
    transform: translateX(4px);
  }
</style>

<script>
  // Function to hydrate the battle component with selected cryptos
  function hydrateBattle() {
    const selectedCryptosJson = localStorage.getItem('selectedCryptos');
    if (selectedCryptosJson) {
      const selectedCryptos = JSON.parse(selectedCryptosJson);
      const battleContainer = document.getElementById('battle-container');
      if (battleContainer) {
        // Update the component's props
        const battleComponent = battleContainer.querySelector('[data-component="CryptoBattle"]');
        if (battleComponent) {
          battleComponent.setAttribute('cryptos', JSON.stringify(selectedCryptos));
          battleComponent.setAttribute('defaultCryptos', JSON.stringify(selectedCryptos));
          // Force a re-render
          battleComponent.dispatchEvent(new Event('astro:load'));
        }
      }
      // Clear the selection after use
      // localStorage.removeItem('selectedCryptos');
    }
  }

  // Run on page load
  document.addEventListener('DOMContentLoaded', hydrateBattle);
  // Also run when navigating back to this page
  window.addEventListener('popstate', hydrateBattle);
</script>