---
import Layout from '../layouts/Layout.astro';
import CryptoTableComponent from '../components/CryptoTable';
import '../styles/crypto-table.css';
import { fetchMarketData } from '../services/CoinGeckoService';
import type { CryptoData } from '../components/CryptoTable';
import taggedCoinsData from '../../data/tagged_coins.json';
import '../styles/main.css';

// Fetch initial data from CoinGecko (or cache)
const marketData = await fetchMarketData();

// Transform CoinGecko data to match CryptoData format
const cryptoData: CryptoData[] = marketData.map((coin, index) => ({
  id: index,
  name: coin.name,
  ticker: coin.symbol.toUpperCase(),
  logo_local: coin.image, // Using CoinGecko's image URLs directly
  marketcap: coin.market_cap.toString(),
  market_stats: {
    market_cap: coin.market_cap.toString(),
    market_cap_fdv_ratio: ((coin.market_cap || 0) / (coin.fully_diluted_valuation || 1)).toString(),
    fully_diluted_valuation: coin.fully_diluted_valuation?.toString() || '0',
    trading_volume_24h: coin.total_volume.toString(),
    circulating_supply: coin.circulating_supply.toString(),
    total_supply: coin.total_supply?.toString() || '0',
    max_supply: coin.max_supply?.toString() || '0',
    current_price: coin.current_price.toString()
  }
}));

console.log('Loaded crypto data:', cryptoData.length);
---

<Layout title="Crypto Table">
  <div class="w-full">
    <CryptoTableComponent 
      client:load 
      data={cryptoData} 
      taggedCoins={taggedCoinsData} 
    />
  </div>
</Layout>

<style is:global>
  /* Add these styles directly in the Astro component */
  tr[style*="background-color"] {
    background-color: rgba(245, 62, 152, 0.15) !important;
  }

  tr[style*="background-color"]:hover {
    background-color: rgba(245, 62, 152, 0.25) !important;
  }

  tr {
    transition: background-color 0.2s ease !important;
  }
</style> 